name: WebSocket Connection Pool Test Suite

on:
  push:
    branches: [connection-pool]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.23"

jobs:
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Build server
        run: go build -o server main.go

      - name: Build test client
        run: go build -o test-client ./cmd/tuning_client

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v -race ./pkg/connection_pool/...

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-test
    strategy:
      matrix:
        test_case:
          - name: "基本機能テスト"
            pool_enabled: false
            client_count: 10
            expected_success: true
          - name: "プールなし高負荷"
            pool_enabled: false
            client_count: 50
            expected_success: true
          - name: "プール制限テスト(5接続)"
            pool_enabled: true
            pool_size: 5
            client_count: 20
            expected_success: true
          - name: "プール最適化テスト(20接続)"
            pool_enabled: true
            pool_size: 20
            client_count: 20
            expected_success: true
          - name: "プール過負荷テスト"
            pool_enabled: true
            pool_size: 5
            client_count: 100
            expected_success: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Build binaries
        run: |
          go build -o server main.go
          go build -o test-client ./cmd/tuning_client

      - name: Start server
        run: |
          ./server &
          echo $! > server.pid
          sleep 5

      - name: Run test - ${{ matrix.test_case.name }}
        env:
          USE_CONNECTION_POOL: ${{ matrix.test_case.pool_enabled }}
          POOL_SIZE: ${{ matrix.test_case.pool_size || 50 }}
          CLIENT_COUNT: ${{ matrix.test_case.client_count }}
          CHUNKS_PER_CLIENT: 15
          CHUNK_INTERVAL: 100ms
          CHUNK_SIZE: 1024
          TEST_DURATION: 10s
          CONNECT_TIMEOUT: 10s
          IDLE_TIMEOUT: 5m
        run: |
          echo "🎯 ${{ matrix.test_case.name }}"
          echo "   プール: ${{ matrix.test_case.pool_enabled }}"
          echo "   プールサイズ: ${{ matrix.test_case.pool_size || 'N/A' }}"
          echo "   クライアント数: ${{ matrix.test_case.client_count }}"
          
          if [ "${{ matrix.test_case.expected_success }}" = "true" ]; then
            ./test-client > test-results.log 2>&1
            if [ $? -eq 0 ]; then
              echo "✅ テスト成功"
              echo "📊 結果:"
              tail -10 test-results.log | grep -E "(全体統計|エラー数|スループット)"
            else
              echo "❌ 予期しないテスト失敗"
              exit 1
            fi
          else
            ./test-client > test-results.log 2>&1 || true
            if grep -q "エラー" test-results.log; then
              echo "✅ 期待通りエラーが発生"
            else
              echo "⚠️  エラーが期待されていましたが成功しました"
            fi
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test_case.name }}-${{ matrix.test_case.client_count }}
          path: test-results.log

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Build binaries
        run: |
          go build -o server main.go
          go build -o test-client ./cmd/tuning_client

      - name: Start server
        run: |
          ./server &
          echo $! > server.pid
          sleep 5

      - name: Performance comparison test
        run: |
          echo "🚀 パフォーマンス比較テスト開始"
          
          # プールなしベースライン
          echo "=== プールなしベースライン ==="
          USE_CONNECTION_POOL=false CLIENT_COUNT=20 ./test-client > no-pool.log 2>&1
          BASELINE_THROUGHPUT=$(grep "全体スループット" no-pool.log | grep -o "[0-9.]*" | head -1)
          echo "ベースライン: ${BASELINE_THROUGHPUT} KB/s"
          
          # プール最適化
          echo "=== プール最適化 (20接続) ==="
          USE_CONNECTION_POOL=true POOL_SIZE=20 CLIENT_COUNT=20 ./test-client > pool-optimal.log 2>&1
          OPTIMAL_THROUGHPUT=$(grep "全体スループット" pool-optimal.log | grep -o "[0-9.]*" | head -1)
          echo "最適化: ${OPTIMAL_THROUGHPUT} KB/s"
          
          # プール制限
          echo "=== プール制限 (5接続) ==="
          USE_CONNECTION_POOL=true POOL_SIZE=5 CLIENT_COUNT=20 ./test-client > pool-limited.log 2>&1
          LIMITED_THROUGHPUT=$(grep "全体スループット" pool-limited.log | grep -o "[0-9.]*" | head -1)
          echo "制限: ${LIMITED_THROUGHPUT} KB/s"
          
          # 結果分析
          echo "📊 パフォーマンス分析結果:"
          echo "ベースライン: ${BASELINE_THROUGHPUT} KB/s"
          echo "最適化: ${OPTIMAL_THROUGHPUT} KB/s"
          echo "制限: ${LIMITED_THROUGHPUT} KB/s"
          
          # パフォーマンス要件チェック
          if (( $(echo "${OPTIMAL_THROUGHPUT} >= ${BASELINE_THROUGHPUT} * 0.95" | awk '{print ($1 >= $2)}') )); then
            echo "✅ 最適化プールはベースラインの95%以上のパフォーマンス"
          else
            echo "❌ 最適化プールのパフォーマンスが不十分"
            echo "   ベースライン: ${BASELINE_THROUGHPUT} KB/s"
            echo "   最適化: ${OPTIMAL_THROUGHPUT} KB/s"
            exit 1
          fi

      - name: Upload performance logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-analysis
          path: "*.log"

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
